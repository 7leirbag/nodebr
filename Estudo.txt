### 02-nodejs
Promise 
https://braziljs.org/blog/promises-no-javascript/


### 03-events
EventEmitter:
https://medium.com/technoetics/node-js-event-emitter-explained-d4f7fd141a1a


### 04-lists
Filter, Map e Reduce:
https://desenvolvimentoparaweb.com/javascript/map-filter-reduce-javascript/


Quando utilizar:

* Use map() quando: é preciso traduzir/mapear todos os elementos em um array para outro conjunto de valores.
    Exemplo: converter temperatura de Fahrenheit para Celsius.

* Use filter() quando: é preciso remover elementos indesejados com base em alguma(s) condição(ões).
    Exemplo: remover elementos duplicados de um array.

* Use reduce() quando: é preciso encontrar um valor cumulativo ou concatenado com base em elementos de todo o array.
    Exemplo: soma de lançamentos de foguetes orbitais no período de 1 ano.




**  O que map() faz: 
    percorre o array da esquerda para a direita invocando uma função de retorno 
    em cada elemento com parâmetros. 
    Para cada chamada de retorno, o valor devolvido se torna o elemento do novo array. 
    Depois que todos os elementos foram percorridos, 
    map() retorna o novo array com todos os elementos “traduzidos”.

                    Parâmetro	Significado
                    elem	    Valor do elemento
                    index	    Índice em cada iteração, da esquerda para a direita
                    array	    Array original invocando o método
                    thisArg	    (opcional) Objeto que será referenciado como this no callback



**  O que filter() faz:
    como map(), filter() percorre o array da esquerda para a direita invocando uma função de retorno 
    em cada elemento. O valor retornado deve ser um booleano 
    que indica se o elemento será mantido ou descartado. 
    Depois de todos os elementos terem sido analisados, 
    filter() retorna um novo array com todos os elementos que retornaram como verdadeiro.

Parâmetros (os mesmo que map()):


**  O que reduce() faz: como map(), reduce() percorre o array da esquerda para a direita
    invocando uma função de retorno em cada elemento. O valor retornado é o valor acumulado passado de callback para callback.
    Depois de todos os elementos terem sido avaliados, reduce() retorna o valor acumulado/concatenado.


                    Parâmetro	    Significado
                    prevVal	        Valor cumulado retornado em cada iteração
                    elem	        Valor do elemento
                    index	        Índice em cada iteração, da esquerda para a direita
                    array	        Array original invocando o método
                    initialValue	(opcional) Objeto usado como primeiro argumento na primeira iteração (mais à esquerda)


**  Destructing
https://imasters.com.br/desenvolvimento/desmistificando-o-destructuring-do-javascript-es6es7













Atual:
https://cursos.nodebr.org/courses/448292/lectures/6939061

10:33
